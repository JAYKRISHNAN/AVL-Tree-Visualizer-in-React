{"version":3,"sources":["classes/BinarySearchTreeNode.js","classes/BinarySearchTree.js","components/BinarySearchTreeNode.js","App.js","serviceWorker.js","index.js"],"names":["BinarySearchTreeNode","value","this","left","right","parent","active","height","Math","max","leftHeight","rightHeight","node","BinarySearchTree","root","newNode","insertNode","currentNode","find","balance","setLeft","setRight","deleteNode","temp","findSmallestNode","balanceFactor","rotateLeftLeft","rotateLeftRight","rotateRightRight","rotateRightLeft","rootNode","leftNode","leftRightNode","rightNode","rightLeftNode","fn","traverseInOrder","traversePreOrder","traversePostOrder","queue","length","shift","push","array","search","level","index","count","pow","Array","fill","leftIndex","rightIndex","milliseconds","date","Date","Fragment","href","className","props","nodeType","Component","App","state","insertValue","deleteValue","searchValue","previewContent","tree","insert","bind","delete","resetActiveStatusOfNodes","resetPreviewContent","breadthFirstSearch","pause","onChangeInsertValue","onChangeSearchValue","onChangeDeleteValue","setState","event","parseInt","target","searchResult","values","join","hasRootNode","id","onChange","type","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ba5f68b0.chunk.js","sourcesContent":["class BinarySearchTreeNode {\n    constructor(value) {\n      this.value = value;\n      this.left = null;\n      this.right = null;\n      this.parent = null;\n      this.active = false;\n    }\n\n    leftHeight() {\n      if (!this.left) {\n        return 0;\n      }\n      return this.left.height() + 1;\n    }\n\n    rightHeight() {\n      if (!this.right) {\n        return 0;\n      }\n      return this.right.height() + 1;\n    }\n\n    height() {\n      return Math.max(this.leftHeight(), this.rightHeight());\n    }\n\n    balanceFactor() {\n      return (this.leftHeight() - this.rightHeight());\n    }\n\n    setLeft(node) {\n      if (this.left) {\n        this.left.parent = null;\n      }\n      this.left = node;\n      if (this.left) {\n        this.left.parent = this;\n      }\n      return this;\n    }\n\n    setRight(node) {\n      if (this.right) {\n        this.right.parent = null;\n      }\n      this.right = node;\n      if (node) {\n        this.right.parent = this;\n      }\n      return this;\n    }\n}\n\nexport default BinarySearchTreeNode;\n","import BinarySearchTreeNode from \"./BinarySearchTreeNode\";\nclass BinarySearchTree {\n  constructor() {\n    this.root = null;\n  }\n\n  insert(value) {\n    const newNode = new BinarySearchTreeNode(value);\n    if (this.root === null){\n      this.root = newNode;\n    }\n    else {\n      this.insertNode(this.root, newNode);\n    }\n\n    // Move up to the root and check balance factors along the way.\n    let currentNode = this.find(this.root, value);\n    while (currentNode) {\n      this.balance(currentNode);\n      currentNode = currentNode.parent;\n    }\n  }\n\n  insertNode(node, newNode) {\n    if (newNode.value < node.value) {\n      if (node.left === null){\n        node.setLeft(newNode);\n      }\n      else {\n        this.insertNode(node.left, newNode);\n      }\n    }\n    else if (newNode.value > node.value) {\n      if (node.right === null){\n        node.setRight(newNode);\n      }\n      else {\n        this.insertNode(node.right, newNode);\n      }\n    }\n  }\n\n  delete(value) {\n    this.root = this.deleteNode(this.root, value);\n\n    if(this.root){\n      this.balance(this.root);\n    }\n  }\n\n  deleteNode(node, value) {\n    if (node === null){\n      return null;\n    }\n    else if (value < node.value) {\n      node.setLeft(this.deleteNode(node.left, value));\n      return node;\n    } else if (value > node.value) {\n      node.setRight(this.deleteNode(node.right, value));\n      return node;\n    } else {\n        if (node.left === null && node.right === null) { //node to be deleted is the leaf node\n            node = null;\n            return node;\n        }\n        else if ((node.left === null) || (node.right === null)){ // only one child for the node to be deleted\n          if (node.left === null) {\n            node = node.right;\n            return node;\n          } else {\n            node = node.left;\n            return node;\n          }\n        }\n\n        else { // two children for the node to be deleted\n          let temp = this.findSmallestNode(node.right);\n          node.value = temp.value;\n\n          node.setRight(this.deleteNode(node.right, temp.value));\n          return node;\n        }\n    }\n  }\n\n  findSmallestNode(node) {\n    if (node.left === null){\n      return node;\n    }\n    else {\n      return this.findSmallestNode(node.left);\n    }\n  }\n\n  balance(node) {\n    if (node.balanceFactor() > 1) {\n      if (node.left.balanceFactor() > 0) {\n        this.rotateLeftLeft(node);\n      } else if (node.left.balanceFactor < 0) {\n        this.rotateLeftRight(node);\n      }\n    } else if (node.balanceFactor() < -1) {\n      if (node.right.balanceFactor() < 0) {\n        this.rotateRightRight(node);\n      } else if (node.right.balanceFactor() > 0) {\n        this.rotateRightLeft(node);\n      }\n    }\n  }\n\n  rotateLeftLeft(rootNode) {\n    const leftNode = rootNode.left;\n    rootNode.setLeft(null);\n    if (rootNode.parent) {\n      rootNode.parent.setLeft(leftNode);\n    } else if (rootNode === this.root) {\n      this.root = leftNode;\n    }\n    if (leftNode.right) {\n      rootNode.setLeft(leftNode.right);\n    }\n    leftNode.setRight(rootNode);\n  }\n\n  rotateLeftRight(rootNode) {\n    const leftNode = rootNode.left;\n    rootNode.setLeft(null);\n\n    const leftRightNode = leftNode.right;\n    leftNode.setRight(null);\n\n    if (leftRightNode.left) {\n      leftNode.setRight(leftRightNode.left);\n      leftRightNode.setLeft(null);\n    }\n\n    rootNode.setLeft(leftRightNode);\n    leftRightNode.setLeft(leftNode);\n\n    this.rotateLeftLeft(rootNode);\n  }\n\n  rotateRightLeft(rootNode) {\n    const rightNode = rootNode.right;\n    rootNode.setRight(null);\n\n    const rightLeftNode = rightNode.left;\n    rightNode.setLeft(null);\n\n    if (rightLeftNode.right) {\n      rightNode.setLeft(rightLeftNode.right);\n      rightLeftNode.setRight(null);\n    }\n\n    rootNode.setRight(rightLeftNode);\n    rightLeftNode.setRight(rightNode);\n    this.rotateRightRight(rootNode);\n  }\n\n  rotateRightRight(rootNode) {\n    const rightNode = rootNode.right;\n    rootNode.setRight(null);\n\n    if (rootNode.parent) {\n      rootNode.parent.setRight(rightNode);\n    } else if (rootNode === this.root) {\n      this.root = rightNode;\n    }\n\n    if (rightNode.left) {\n      rootNode.setRight(rightNode.left);\n    }\n\n    rightNode.setLeft(rootNode);\n  }\n\n  traverseInOrder(node, fn) {\n    if (node !== null) {\n      this.traverseInOrder(node.left, fn);\n      fn(node);\n      this.traverseInOrder(node.right, fn);\n    }\n  }\n\n  traversePreOrder(node, fn) {\n    if (node !== null) {\n      fn(node);\n      this.traversePreOrder(node.left, fn);\n      this.traversePreOrder(node.right, fn);\n    }\n  }\n\n  traversePostOrder(node, fn) {\n    if (node !== null) {\n      this.traversePostOrder(node.left, fn);\n      this.traversePostOrder(node.right, fn);\n      fn(node);\n    }\n  }\n\n  find(node, value) {\n    if (node === null){\n      return null;\n    }\n    else if (value < node.value) {\n      return this.find(node.left, value);\n    }\n    else if (value > node.value){\n      return this.find(node.right, value);\n    }\n    else {\n      return node;\n    }\n  }\n\n  breadthFirstSearch(node, fn) {\n    const queue = [node];\n    while(queue.length > 0){\n      const currentNode = queue.shift();\n      fn(currentNode);\n      if (currentNode.left){\n        queue.push(currentNode.left);\n      }\n      if(currentNode.right){\n        queue.push(currentNode.right);\n      }\n    }\n  }\n\n  levelOrder() {\n    if (!this.root) return [];\n    let array = [];\n    search(this.root, 1, 1);\n\n    function search(node, level, index) {\n      if (node) {\n        const count = Math.pow(2, level - 1);\n        if (array.length < level) {\n          array.push(Array(count).fill(\"\"));\n        }\n        var arr = array[level - 1];\n        arr[index - 1] = node;\n        const leftIndex = 2 * index - 1;\n        const rightIndex = 2 * index;\n        search(node.left, level + 1, leftIndex);\n        search(node.right, level + 1, rightIndex);\n      } else {\n        return;\n      }\n    }\n\n    return array;\n  }\n\n  pause(milliseconds) {\n    var date = new Date();\n    while ((new Date()) - date <= milliseconds) { /* Do nothing */ }\n  }\n}\n\nexport default BinarySearchTree;\n","import React, { Component } from 'react';\nimport './BinarySearchTreeNode.css';\n\nclass BinarySearchTreeNode extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <li>\n          <a href=\"#\" className={this.props.nodeType + (this.props.node.active == true ? \" active\" : \"\")}>{this.props.node.value}</a>\n          { (this.props.node.left || this.props.node.right) &&\n            <ul>\n              { this.props.node.left &&\n                <BinarySearchTreeNode node={this.props.node.left} nodeType=\"left\"/>\n              }\n              { this.props.node.right &&\n                <BinarySearchTreeNode node={this.props.node.right} nodeType=\"right\"/>\n              }\n            </ul>\n          }\n        </li>\n      </React.Fragment>\n    )\n  }\n}\nexport default BinarySearchTreeNode;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport BinarySearchTree from \"./classes/BinarySearchTree.js\";\nimport BinarySearchTreeNode from \"./components/BinarySearchTreeNode.js\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      insertValue: \"\",\n      deleteValue: \"\",\n      searchValue: \"\",\n      previewContent: \"\",\n      tree: new BinarySearchTree()\n    };\n    this.insert = this.insert.bind(this);\n    this.delete = this.delete.bind(this);\n    this.resetActiveStatusOfNodes = this.resetActiveStatusOfNodes.bind(this);\n    this.resetPreviewContent = this.resetPreviewContent.bind(this);\n\n    this.traversePreOrder = this.traversePreOrder.bind(this);\n    this.traverseInOrder = this.traverseInOrder.bind(this);\n    this.traversePostOrder = this.traversePostOrder.bind(this);\n    this.breadthFirstSearch = this.breadthFirstSearch.bind(this);\n    this.search = this.search.bind(this);\n    this.pause = this.pause.bind(this);\n\n    this.onChangeInsertValue = this.onChangeInsertValue.bind(this);\n    this.onChangeSearchValue = this.onChangeSearchValue.bind(this);\n    this.onChangeDeleteValue = this.onChangeDeleteValue.bind(this);\n  }\n\n  pause(milliseconds) {\n    var date = new Date();\n    while (new Date() - date <= milliseconds) {\n      /* Do nothing */\n    }\n  }\n\n  resetPreviewContent(){\n    this.setState({\n        previewContent: \"\"\n    })\n  }\n\n  resetActiveStatusOfNodes(){\n    this.state.tree.traverseInOrder(this.state.tree.root, function(node) {\n      node.active = false;\n    });\n  }\n\n  onChangeInsertValue(event) {\n    this.resetActiveStatusOfNodes();\n    this.resetPreviewContent();\n    this.setState({\n      insertValue: parseInt(event.target.value)\n    });\n  }\n\n  onChangeDeleteValue(event) {\n    this.resetActiveStatusOfNodes();\n    this.resetPreviewContent();\n    this.setState({\n      deleteValue: parseInt(event.target.value)\n    });\n  }\n\n  onChangeSearchValue(event) {\n    this.resetActiveStatusOfNodes();\n    this.resetPreviewContent();\n    this.setState({\n      searchValue: parseInt(event.target.value)\n    });\n  }\n\n  insert() {\n    this.resetActiveStatusOfNodes();\n    this.resetPreviewContent();\n    this.state.tree.insert(this.state.insertValue);\n    this.setState({\n      insertValue: \"\"\n    });\n  }\n\n  delete() {\n    this.resetActiveStatusOfNodes();\n    this.resetPreviewContent();\n    this.state.tree.delete(this.state.deleteValue);\n    this.setState({\n      deleteValue: \"\"\n    });\n  }\n\n  search() {\n    this.resetActiveStatusOfNodes();\n    this.resetPreviewContent();\n    let searchResult = this.state.tree.find(\n      this.state.tree.root,\n      this.state.searchValue\n    );\n\n    if (searchResult) {\n      searchResult.active = true;\n    } else {\n      this.setState({\n        previewContent: \"Not Found!\"\n      });\n    }\n\n    this.setState({\n      searchValue: \"\"\n    });\n  }\n\n  traversePreOrder() {\n    this.resetActiveStatusOfNodes();\n    let values = [];\n    this.state.tree.traversePreOrder(this.state.tree.root, function(node) {\n      values.push(node.value);\n    });\n    this.setState({\n      previewContent: values.join(\" --> \")\n    });\n  }\n\n  traversePostOrder() {\n    this.resetActiveStatusOfNodes();\n    let values = [];\n    this.state.tree.traversePostOrder(this.state.tree.root, function(node) {\n      values.push(node.value);\n    });\n    this.setState({\n      previewContent: values.join(\" --> \")\n    });\n  }\n\n  traverseInOrder() {\n    this.resetActiveStatusOfNodes();\n    let values = [];\n    this.state.tree.traverseInOrder(this.state.tree.root, function(node) {\n      values.push(node.value);\n    });\n    this.setState({\n      previewContent: values.join(\" --> \")\n    });\n  }\n\n  breadthFirstSearch() {\n    this.resetActiveStatusOfNodes();\n    let values = [];\n    this.state.tree.breadthFirstSearch(this.state.tree.root, function(node) {\n      values.push(node.value);\n    });\n    this.setState({\n      previewContent: values.join(\" --> \")\n    });\n  }\n\n  render() {\n    const hasRootNode = this.state.tree.root;\n    return (\n      <React.Fragment>\n        <div id=\"app\">\n          <div id=\"tree\" className=\"tree\">\n            {hasRootNode ? (\n              <ul>\n                <BinarySearchTreeNode\n                  node={this.state.tree.root}\n                  nodeType=\"root\"\n                />\n              </ul>\n            ) : (\n              <h5> EMPTY TREE! </h5>\n            )}\n          </div>\n\n          <div id=\"basic-actions\">\n            <div className=\"action\">\n              <input\n                value={this.state.insertValue}\n                onChange={this.onChangeInsertValue}\n                type=\"number\"\n              />\n              <button\n                onClick={this.insert}\n                className=\"btn btn-secondary btn-sm\"\n              >\n                ADD\n              </button>\n            </div>\n\n            <div className=\"action\">\n              <input\n                value={this.state.deleteValue}\n                onChange={this.onChangeDeleteValue}\n                type=\"number\"\n              />\n              <button\n                onClick={this.delete}\n                className=\"btn btn-secondary btn-sm\"\n              >\n                REMOVE\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <div id=\"traversal-preview\">\n          { this.state.previewContent }\n        </div>\n\n        <div id=\"traversal-actions\">\n          <div className=\"action\">\n            <input\n              value={this.state.searchValue}\n              onChange={this.onChangeSearchValue}\n              type=\"number\"\n            />\n            <button\n              onClick={this.search}\n              className=\"btn btn-secondary btn-sm\"\n            >\n              FIND\n            </button>\n          </div>\n\n          <div className=\"action\">\n            <button\n              onClick={this.traversePreOrder}\n              className=\"btn btn-secondary btn-sm\"\n            >\n              PRE ORDER\n            </button>\n          </div>\n\n          <div className=\"action\">\n            <button\n              onClick={this.traverseInOrder}\n              className=\"btn btn-secondary btn-sm\"\n            >\n              IN ORDER\n            </button>\n          </div>\n\n          <div className=\"action\">\n            <button\n              onClick={this.traversePostOrder}\n              className=\"btn btn-secondary btn-sm\"\n            >\n              POST ORDER\n            </button>\n          </div>\n\n          <div className=\"action\">\n            <button\n              onClick={this.breadthFirstSearch}\n              className=\"btn btn-secondary btn-sm\"\n            >\n              BFS\n            </button>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}