{"version":3,"sources":["classes/BinarySearchTreeNode.js","classes/BinarySearchTree.js","components/BinarySearchTreeNode.js","App.js","serviceWorker.js","index.js"],"names":["BinarySearchTreeNode","value","this","left","right","parent","height","Math","max","leftHeight","rightHeight","node","BinarySearchTree","root","newNode","insertNode","currentNode","find","balance","setLeft","setRight","deleteNode","temp","findSmallestNode","balanceFactor","rotateLeftLeft","rotateLeftRight","rotateRightRight","rotateRightLeft","rootNode","leftNode","leftRightNode","rightNode","rightLeftNode","fn","traverseInOrder","traversePreOrder","traversePostOrder","queue","length","shift","push","array","search","level","index","count","pow","Array","fill","leftIndex","rightIndex","Fragment","href","props","Component","App","state","insertValue","deleteValue","searchValue","tree","insert","bind","delete","breadthFirstSearch","onChangeInsertValue","onChangeSearchValue","onChangeDeleteValue","event","setState","parseInt","target","searchResult","alert","values","join","hasRootNode","id","className","onChange","type","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2e93a01a.chunk.js","sourcesContent":["class BinarySearchTreeNode {\n    constructor(value) {\n      this.value = value;\n      this.left = null;\n      this.right = null;\n      this.parent = null;\n    }\n\n    leftHeight() {\n      if (!this.left) {\n        return 0;\n      }\n      return this.left.height() + 1;\n    }\n\n    rightHeight() {\n      if (!this.right) {\n        return 0;\n      }\n      return this.right.height() + 1;\n    }\n\n    height() {\n      return Math.max(this.leftHeight(), this.rightHeight());\n    }\n\n    balanceFactor() {\n      return (this.leftHeight() - this.rightHeight());\n    }\n\n    setLeft(node) {\n      if (this.left) {\n        this.left.parent = null;\n      }\n      this.left = node;\n      if (this.left) {\n        this.left.parent = this;\n      }\n      return this;\n    }\n\n    setRight(node) {\n      if (this.right) {\n        this.right.parent = null;\n      }\n      this.right = node;\n      if (node) {\n        this.right.parent = this;\n      }\n      return this;\n    }\n}\n\nexport default BinarySearchTreeNode;\n","import BinarySearchTreeNode from \"./BinarySearchTreeNode\";\n\nclass BinarySearchTree {\n  constructor() {\n    this.root = null;\n  }\n\n  insert(value) {\n    const newNode = new BinarySearchTreeNode(value);\n    if (this.root === null){\n      this.root = newNode;\n    }\n    else {\n      this.insertNode(this.root, newNode);\n    }\n\n    // Move up to the root and check balance factors along the way.\n    let currentNode = this.find(this.root, value);\n    while (currentNode) {\n      this.balance(currentNode);\n      currentNode = currentNode.parent;\n    }\n  }\n\n  insertNode(node, newNode) {\n    if (newNode.value < node.value) {\n      if (node.left === null){\n        node.setLeft(newNode);\n      }\n      else {\n        this.insertNode(node.left, newNode);\n      }\n    }\n    else if (newNode.value > node.value) {\n      if (node.right === null){\n        node.setRight(newNode);\n      }\n      else {\n        this.insertNode(node.right, newNode);\n      }\n    }\n  }\n\n  delete(value) {\n    this.root = this.deleteNode(this.root, value);\n\n    if(this.root){\n      this.balance(this.root);\n    }\n  }\n\n  deleteNode(node, value) {\n    if (node === null){\n      return null;\n    }\n    else if (value < node.value) {\n      node.setLeft(this.deleteNode(node.left, value));\n      return node;\n    } else if (value > node.value) {\n      node.setRight(this.deleteNode(node.right, value));\n      return node;\n    } else {\n        if (node.left === null && node.right === null) { //node to be deleted is the leaf node\n            node = null;\n            return node;\n        }\n        else if ((node.left === null) || (node.right === null)){ // only one child for the node to be deleted\n          if (node.left === null) {\n            node = node.right;\n            return node;\n          } else {\n            node = node.left;\n            return node;\n          }\n        }\n\n        else { // two children for the node to be deleted\n          let temp = this.findSmallestNode(node.right);\n          node.value = temp.value;\n\n          node.setRight(this.deleteNode(node.right, temp.value));\n          return node;\n        }\n    }\n  }\n\n  findSmallestNode(node) {\n    if (node.left === null){\n      return node;\n    }\n    else {\n      return this.findSmallestNode(node.left);\n    }\n  }\n\n  balance(node) {\n    if (node.balanceFactor() > 1) {\n      if (node.left.balanceFactor() > 0) {\n        this.rotateLeftLeft(node);\n      } else if (node.left.balanceFactor < 0) {\n        this.rotateLeftRight(node);\n      }\n    } else if (node.balanceFactor() < -1) {\n      if (node.right.balanceFactor() < 0) {\n        this.rotateRightRight(node);\n      } else if (node.right.balanceFactor() > 0) {\n        this.rotateRightLeft(node);\n      }\n    }\n  }\n\n  rotateLeftLeft(rootNode) {\n    const leftNode = rootNode.left;\n    rootNode.setLeft(null);\n    if (rootNode.parent) {\n      rootNode.parent.setLeft(leftNode);\n    } else if (rootNode === this.root) {\n      this.root = leftNode;\n    }\n    if (leftNode.right) {\n      rootNode.setLeft(leftNode.right);\n    }\n    leftNode.setRight(rootNode);\n  }\n\n  rotateLeftRight(rootNode) {\n    const leftNode = rootNode.left;\n    rootNode.setLeft(null);\n\n    const leftRightNode = leftNode.right;\n    leftNode.setRight(null);\n\n    if (leftRightNode.left) {\n      leftNode.setRight(leftRightNode.left);\n      leftRightNode.setLeft(null);\n    }\n\n    rootNode.setLeft(leftRightNode);\n    leftRightNode.setLeft(leftNode);\n\n    this.rotateLeftLeft(rootNode);\n  }\n\n  rotateRightLeft(rootNode) {\n    const rightNode = rootNode.right;\n    rootNode.setRight(null);\n\n    const rightLeftNode = rightNode.left;\n    rightNode.setLeft(null);\n\n    if (rightLeftNode.right) {\n      rightNode.setLeft(rightLeftNode.right);\n      rightLeftNode.setRight(null);\n    }\n\n    rootNode.setRight(rightLeftNode);\n    rightLeftNode.setRight(rightNode);\n    this.rotateRightRight(rootNode);\n  }\n\n  rotateRightRight(rootNode) {\n    const rightNode = rootNode.right;\n    rootNode.setRight(null);\n\n    if (rootNode.parent) {\n      rootNode.parent.setRight(rightNode);\n    } else if (rootNode === this.root) {\n      this.root = rightNode;\n    }\n\n    if (rightNode.left) {\n      rootNode.setRight(rightNode.left);\n    }\n\n    rightNode.setLeft(rootNode);\n  }\n\n  traverseInOrder(node, fn) {\n    if (node !== null) {\n      this.traverseInOrder(node.left, fn);\n      fn(node);\n      this.traverseInOrder(node.right, fn);\n    }\n  }\n\n  traversePreOrder(node, fn) {\n    if (node !== null) {\n      fn(node);\n      this.traversePreOrder(node.left, fn);\n      this.traversePreOrder(node.right, fn);\n    }\n  }\n\n  traversePostOrder(node, fn) {\n    if (node !== null) {\n      this.traversePostOrder(node.left, fn);\n      this.traversePostOrder(node.right, fn);\n      fn(node);\n    }\n  }\n\n  find(node, value) {\n    if (node === null){\n      return null;\n    }\n    else if (value < node.value) {\n      return this.find(node.left, value);\n    }\n    else if (value > node.value){\n      return this.find(node.right, value);\n    }\n    else {\n      return node;\n    }\n  }\n\n  breadthFirstSearch(node, fn) {\n    const queue = [node];\n    while(queue.length > 0){\n      const currentNode = queue.shift();\n      fn(currentNode);\n      if (currentNode.left){\n        queue.push(currentNode.left);\n      }\n      if(currentNode.right){\n        queue.push(currentNode.right);\n      }\n    }\n  }\n\n  levelOrder() {\n    if (!this.root) return [];\n    let array = [];\n    search(this.root, 1, 1);\n\n    function search(node, level, index) {\n      if (node) {\n        const count = Math.pow(2, level - 1);\n        if (array.length < level) {\n          array.push(Array(count).fill(\"\"));\n        }\n        var arr = array[level - 1];\n        arr[index - 1] = node;\n        const leftIndex = 2 * index - 1;\n        const rightIndex = 2 * index;\n        search(node.left, level + 1, leftIndex);\n        search(node.right, level + 1, rightIndex);\n      } else {\n        return;\n      }\n    }\n\n    return array;\n  }\n}\n\nexport default BinarySearchTree;\n","import React, { Component } from 'react';\nimport './BinarySearchTreeNode.css';\n\nclass BinarySearchTreeNode extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <li>\n          <a href=\"#\">{this.props.node.value}</a>\n          { (this.props.node.left || this.props.node.right) &&\n            <ul>\n              { this.props.node.left &&\n                <BinarySearchTreeNode node={this.props.node.left} />\n              }\n              { this.props.node.right &&\n                <BinarySearchTreeNode node={this.props.node.right} />\n              }\n            </ul>\n          }\n        </li>\n      </React.Fragment>\n    )\n  }\n}\nexport default BinarySearchTreeNode;","import React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport BinarySearchTree from \"./classes/BinarySearchTree.js\";\nimport BinarySearchTreeNode from \"./components/BinarySearchTreeNode.js\";\n\n class App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      insertValue: \"\",\n      deleteValue: \"\",\n      searchValue: \"\",\n      tree: new BinarySearchTree(),\n    };\n    this.insert = this.insert.bind(this);\n    this.delete = this.delete.bind(this);\n\n    this.traversePreOrder = this.traversePreOrder.bind(this);\n    this.traverseInOrder = this.traverseInOrder.bind(this);\n    this.traversePostOrder = this.traversePostOrder.bind(this);\n    this.breadthFirstSearch = this.breadthFirstSearch.bind(this);\n    this.search = this.search.bind(this);\n\n    this.onChangeInsertValue = this.onChangeInsertValue.bind(this);\n    this.onChangeSearchValue = this.onChangeSearchValue.bind(this);\n    this.onChangeDeleteValue = this.onChangeDeleteValue.bind(this);\n  }\n\n  onChangeInsertValue(event) {\n    this.setState({\n      insertValue: parseInt(event.target.value)\n    });\n  }\n\n  onChangeDeleteValue(event) {\n    this.setState({\n      deleteValue: parseInt(event.target.value)\n    });\n  }\n\n  onChangeSearchValue(event) {\n    this.setState({\n      searchValue: parseInt(event.target.value)\n    });\n  }\n\n  insert() {\n    this.state.tree.insert(this.state.insertValue);\n    this.setState({\n      insertValue: \"\"\n    });\n  }\n\n  delete(){\n    this.state.tree.delete(this.state.deleteValue);\n    this.setState({\n      deleteValue: \"\"\n    });\n  }\n\n  search(){\n    let searchResult = this.state.tree.find(this.state.tree.root, this.state.searchValue);\n    if(searchResult){\n      alert(searchResult.value);\n    }\n    else{\n      alert(\"Not found\");\n    }\n  }\n\n  traversePreOrder(){\n    let values = [];\n    this.state.tree.traversePreOrder(this.state.tree.root, function(node){(values.push(node.value));} );\n    alert(values.join(\" --> \"));\n  }\n\n  traversePostOrder(){\n    let values = [];\n    this.state.tree.traversePostOrder(this.state.tree.root, function(node){(values.push(node.value));} );\n    alert(values.join(\" --> \"));\n  }\n\n  traverseInOrder(){\n    let values = [];\n    this.state.tree.traverseInOrder(this.state.tree.root, function(node){(values.push(node.value));} );\n    alert(values.join(\" --> \"));\n  }\n\n  breadthFirstSearch(){\n    let values = [];\n    this.state.tree.breadthFirstSearch(this.state.tree.root, function(node){(values.push(node.value));} );\n    alert(values.join(\" --> \"));\n  }\n\n  render(){\n    const hasRootNode = this.state.tree.root;\n    return (\n      <div id=\"app\">\n        <div id=\"tree\" className=\"tree\">\n          { hasRootNode ? (\n              <ul><BinarySearchTreeNode node={this.state.tree.root} /></ul>\n            ) : (\n              <h4> No elements in the tree. Click insert to start! </h4>\n            )\n          }\n        </div>\n        <div id=\"actions\">\n          <div className=\"action\">\n            <input value={this.state.insertValue} onChange={this.onChangeInsertValue} type=\"number\"/>\n            <button  onClick={this.insert} className=\"btn btn-default\">Insert</button>\n          </div>\n\n          <div className=\"action\">\n            <input value={this.state.deleteValue} onChange={this.onChangeDeleteValue} type=\"number\"/>\n            <button onClick={this.delete} className=\"btn btn-default\">Delete</button>\n          </div>\n\n          <div className=\"action\">\n            <input value={this.state.searchValue} onChange={this.onChangeSearchValue} type=\"number\"/>\n            <button onClick={this.search} className=\"btn btn-default\">Search</button>\n          </div>\n\n          <div className=\"action\">\n            <button onClick={this.traversePreOrder} className=\"btn btn-default\">Traverse Pre Order</button>\n          </div>\n\n          <div className=\"action\">\n            <button onClick={this.traverseInOrder} className=\"btn btn-default\">Traverse In Order</button>\n          </div>\n\n          <div className=\"action\">\n            <button onClick={this.traversePostOrder} className=\"btn btn-default\">Traverse Post Order</button>\n          </div>\n\n          <div className=\"action\">\n            <button onClick={this.breadthFirstSearch} className=\"btn btn-default\">Traverse Breadth First Search</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}